3 1 2 9 
6 4 3 1 
5 7 4 6 
1 0 1


https://tabelacruzamentonumeros.onrender.com

Números recebidos: [3, 1, 2, 9, 6, 4, 3, 1, 5, 7, 4, 6, 1, 0, 1]
Quantidade de dezenas: 6
Pares válidos encontrados: [1, 4, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 23, 29, 31, 32, 34, 37, 40, 41, 43, 46, 47, 51, 56, 59, 60]

observe este código e me mostre exatamente o que esta faltando para que ele rode normal... 
algo esta faltando é que eu me perdi... na lógica.. 



Pares válidos sendo enviados:
[1, 4, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 23, 29, 31, 32, 34, 37, 40, 41, 43, 46, 47, 51, 59, 60]  

Pares válidos encontrados:
[1, 4, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 19, 21, 23, 29, 31, 32, 34, 37, 40, 41, 43, 46, 47, 51, 59, 60]  


# Limitar o número máximo de combinações
MAX_COMBINATIONS = 2000  # Ajustável conforme necessário


O número máximo de combinações esta setado para 2000 por conjunto de dezenas




# Adicione esta importação no topo do arquivo
from flask import Flask, render_template, request, jsonify, send_file, session  # Adicionado session
import pandas as pd
import requests
import io
import json
from itertools import combinations


# E adicione esta configuração após criar a app
app = Flask(__name__)
app.secret_key = 'sua_chave_secreta_aqui'  # Necessário para usar session

@app.route('/')
def index():
    return render_template('index.html')


def format_number(num):
    """Formata número para ter sempre 2 dígitos"""
    return f"{num:02d}"

def combine_digits(a, b):
    """Combina dois dígitos para formar um número"""
    return int(f"{a}{b}")

# def get_valid_pairs(grid):
#     valid_pairs = set()
#     rows = [
#         grid[0:5],    # primeira linha
#         grid[5:9],    # segunda linha
#         grid[9:12],   # terceira linha
#         grid[12:14],  # quarta linha
#         grid[14:15]   # quinta linha
#     ]

   
#     # Horizontal (esquerda para direita e direita para esquerda)
#     for row in rows:
#         for i in range(len(row)-1):
#             # Considerar combinações nos dois sentidos
#             num1 = combine_digits(row[i], row[i+1])
#             num2 = combine_digits(row[i+1], row[i])
#             # Verificar se as combinações estão no intervalo válido
#             if 1 <= num1 <= 60:
#                 valid_pairs.add(num1)
#             if 1 <= num2 <= 60:
#                 valid_pairs.add(num2)
#             # Zero à esquerda também é válido (06)
#             if row[i] == 0:
#                 zero_combo = row[i+1]
#                 if 1 <= zero_combo <= 60:
#                     valid_pairs.add(zero_combo)
#             if row[i+1] == 0:
#                 zero_combo = row[i]
#                 if 1 <= zero_combo <= 60:
#                     valid_pairs.add(zero_combo)
    
#     # Diagonal e vertical
#     # Implementar lógica adicional aqui...
    
#     return sorted(list(valid_pairs))

#Esta função está causando este erro "NetworkError when attempting to fetch resource."
#Gerando os numeros da grid tringulo
def get_valid_pairs(grid):
    valid_pairs = set()
    rows = [
        grid[0:5],    # primeira linha
        grid[5:9],    # segunda linha
        grid[9:12],   # terceira linha
        grid[12:14],  # quarta linha
        grid[14:15]   # quinta linha
    ]
    
    # Função auxiliar para validar e adicionar números
    def add_valid_number(num):
        if 1 <= num <= 60:
            valid_pairs.add(num)
    
    # 1. Horizontal (esquerda para direita e direita para esquerda)
    for row in rows:
        for i in range(len(row)-1):
            add_valid_number(combine_digits(row[i], row[i+1]))
            add_valid_number(combine_digits(row[i+1], row[i]))

    # 2. Diagonal (superior esquerda para inferior direita)
    for i in range(len(rows)-1):
        current_row = rows[i]
        next_row = rows[i+1]
        for j in range(len(current_row)-1):
            if j < len(next_row):
                add_valid_number(combine_digits(current_row[j], next_row[j]))
                add_valid_number(combine_digits(next_row[j], current_row[j]))

    # 3. Diagonal (superior direita para inferior esquerda)
    for i in range(len(rows)-1):
        current_row = rows[i]
        next_row = rows[i+1]
        for j in range(1, len(current_row)):
            if j-1 < len(next_row):
                add_valid_number(combine_digits(current_row[j], next_row[j-1]))
                add_valid_number(combine_digits(next_row[j-1], current_row[j]))

    # 4. Vertical
    col_positions = [
        [(0,0), (1,0), (2,0), (3,0), (4,0)],  # primeira coluna
        [(0,1), (1,1), (2,1), (3,1)],         # segunda coluna
        [(0,2), (1,2), (2,2)],                # terceira coluna
        [(0,3), (1,3)],                       # quarta coluna
        [(0,4)]                               # quinta coluna
    ]
    
    for col in col_positions:
        for i in range(len(col)-1):
            row1, pos1 = col[i]
            row2, pos2 = col[i+1]
            if pos1 < len(rows[row1]) and pos2 < len(rows[row2]):
                add_valid_number(combine_digits(rows[row1][pos1], rows[row2][pos2]))
                add_valid_number(combine_digits(rows[row2][pos2], rows[row1][pos1]))

    # 5. Tratamento especial para zero
    for i, row in enumerate(rows):
        for j, num in enumerate(row):
            if num == 0:
                # Verificar números adjacentes (horizontal, vertical e diagonal)
                adjacent_positions = [
                    (i, j-1), (i, j+1),  # horizontal
                    (i-1, j), (i+1, j),  # vertical
                    (i-1, j-1), (i-1, j+1),  # diagonal superior
                    (i+1, j-1), (i+1, j+1)   # diagonal inferior
                ]
                
                for adj_i, adj_j in adjacent_positions:
                    if (0 <= adj_i < len(rows) and 
                        0 <= adj_j < len(rows[adj_i])):
                        adj_num = rows[adj_i][adj_j]
                        # Zero à esquerda (06)
                        add_valid_number(combine_digits(0, adj_num))
                        # Zero à direita (60)
                        add_valid_number(combine_digits(adj_num, 0))

    return sorted(list(valid_pairs))



# @app.route('/generate', methods=['POST'])
# def generate():
#     try:
#         # Adicione logs para debug (instrução do codigo2)
#         print("Recebendo requisição...")  # Log inicial para debug
        
#         data = request.json
#         if not data:
#             return jsonify({'error': 'Dados não recebidos'}), 400  # Verificação de dados recebidos (codigo2)
        
#         numbers = data.get('numbers')  # Uso de `get` para evitar KeyError (codigo2)
#         num_dezenas = data.get('combinations')  # Uso de `get` para evitar KeyError (codigo2)
        
#         if not numbers or not num_dezenas:
#             return jsonify({'error': 'Parâmetros incompletos'}), 400  # Verificação de parâmetros (codigo2)
        
#         print(f"Números recebidos: {numbers}")  # Log de números recebidos (codigo2)
#         print(f"Quantidade de dezenas: {num_dezenas}")  # Log de quantidade de dezenas (codigo2)
        
#         valid_pairs = get_valid_pairs(numbers)  # Função compartilhada
#         print(f"Pares válidos encontrados: {valid_pairs}")  # Log de pares válidos encontrados (codigo2)
        
#         # Gerar combinações de acordo com o número de dezenas solicitado
#         if 6 <= num_dezenas <= 20:  # Permitir até 20 dezenas
#             jogos = list(combinations(valid_pairs, num_dezenas))
            
#             jogos_validos = []
#             for jogo in jogos:
#                 jogo_ordenado = sorted(jogo)
#                 if (len(set(jogo_ordenado)) == len(jogo_ordenado) and
#                     all(1 <= num <= 60 for num in jogo_ordenado)):
#                     jogos_validos.append([format_number(n) for n in jogo_ordenado])
            
#             # Armazenar na sessão para download
#             session['combinations'] = jogos_validos  # Sessão compartilhada
#             session['num_dezenas'] = num_dezenas  # Sessão compartilhada
            
#             return jsonify({
#                 'combinations': jogos_validos,
#                 'total': len(jogos_validos)
#             })
#         else:
#             return jsonify({'error': 'Número de dezenas deve estar entre 6 e 20'}), 400  # Validação compartilhada
            
#     except Exception as e:
#         print(f"Erro: {str(e)}")  # Log do erro (codigo2)
#         return jsonify({'error': str(e)}), 400  # Tratamento de exceção compartilhado

@app.route('/generate', methods=['POST'])
def generate():
    try:
        print("Recebendo requisição...")
        
        data = request.json
        if not data:
            return jsonify({'error': 'Dados não recebidos'}), 400
            
        numbers = data.get('numbers')
        num_dezenas = data.get('combinations')
        
        if not numbers or not num_dezenas:
            return jsonify({'error': 'Parâmetros incompletos'}), 400
            
        print(f"Números recebidos: {numbers}")
        print(f"Quantidade de dezenas: {num_dezenas}")
        
        valid_pairs = get_valid_pairs(numbers)
        print(f"Pares válidos encontrados: {valid_pairs}")
        
        if not (6 <= num_dezenas <= 20):
            return jsonify({'error': 'Número de dezenas deve estar entre 6 e 20'}), 400
            
        # Limitar o número de combinações para evitar sobrecarga
        max_combinations = 10000  # Você pode ajustar este valor
        jogos = list(combinations(valid_pairs, num_dezenas))[:max_combinations]
        
        jogos_validos = []
        for jogo in jogos:
            jogo_ordenado = sorted(jogo)
            if (len(set(jogo_ordenado)) == len(jogo_ordenado) and
                all(1 <= num <= 60 for num in jogo_ordenado)):
                jogos_validos.append([format_number(n) for n in jogo_ordenado])
        
        return jsonify({
            'combinations': jogos_validos,
            'total': len(jogos_validos)
        })
            
    except Exception as e:
        print(f"Erro: {str(e)}")
        return jsonify({'error': str(e)}), 400

# @app.route('/download/<format>')
# def download(format):
#     try:
#         # Recuperar dados da sessão ou receber como parâmetro
#         combinations = session.get('combinations', [])
#         num_dezenas = session.get('num_dezenas', 6)
        
#         if format == 'txt':
#             output = io.StringIO()
#             output.write(f"Jogos gerados com {num_dezenas} dezenas\n")
#             output.write(f"Total de jogos: {len(combinations)}\n\n")
            
#             for i, combo in enumerate(combinations, 1):
#                 output.write(f"Jogo {i}: {' '.join(combo)}\n")
                
#             output.seek(0)
#             return send_file(
#                 io.BytesIO(output.getvalue().encode('utf-8')),
#                 mimetype='text/plain',
#                 as_attachment=True,
#                 download_name='jogos_mega_sena.txt'
#             )
            
#         elif format == 'xlsx':
#             df = pd.DataFrame(combinations)
#             df.index = [f"Jogo {i+1}" for i in range(len(df))]
#             df.columns = [f"Número {i+1}" for i in range(len(df.columns))]
            
#             output = io.BytesIO()
#             with pd.ExcelWriter(output, engine='openpyxl') as writer:
#                 df.to_excel(writer, sheet_name=f'Jogos {num_dezenas} dezenas')
                
#             output.seek(0)
#             return send_file(
#                 output,
#                 mimetype='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
#                 as_attachment=True,
#                 download_name='jogos_mega_sena.xlsx'
#             )
            
#         elif format == 'html':
#             html_content = f"""
#             <html>
#             <head>
#                 <title>Jogos Mega Sena</title>
#                 <style>
#                     table {{ border-collapse: collapse; width: 100%; }}
#                     th, td {{ border: 1px solid black; padding: 8px; text-align: center; }}
#                     th {{ background-color: #209869; color: white; }}
#                 </style>
#             </head>
#             <body>
#                 <h2>Jogos gerados com {num_dezenas} dezenas</h2>
#                 <p>Total de jogos: {len(combinations)}</p>
#                 <table>
#                     <tr>
#                         <th>Jogo</th>
#                         {''.join(f'<th>Número {i+1}</th>' for i in range(num_dezenas))}
#                     </tr>
#                     {''.join(f'<tr><td>Jogo {i+1}</td>{"".join(f"<td>{n}</td>" for n in combo)}</tr>' for i, combo in enumerate(combinations))}
#                 </table>
#             </body>
#             </html>
#             """
            
#             return send_file(
#                 io.BytesIO(html_content.encode()),
#                 mimetype='text/html',
#                 as_attachment=True,
#                 download_name='jogos_mega_sena.html'
#             )
#     except Exception as e:
#         return jsonify({'error': str(e)}), 400

@app.route('/download/<format>', methods=['POST'])
def download(format):
    try:
        data = request.json
        combinations = data.get('combinations', [])
        num_dezenas = data.get('num_dezenas', 6)
        
        if format == 'txt':
            output = io.StringIO()
            output.write(f"Jogos gerados com {num_dezenas} dezenas\n")
            output.write(f"Total de jogos: {len(combinations)}\n\n")
            
            for i, combo in enumerate(combinations, 1):
                output.write(f"Jogo {i}: {' '.join(combo)}\n")
                
            output.seek(0)
            return send_file(
                io.BytesIO(output.getvalue().encode('utf-8')),
                mimetype='text/plain',
                as_attachment=True,
                download_name='jogos_mega_sena.txt'
            )
            
        elif format == 'xlsx':
            df = pd.DataFrame(combinations)
            df.index = [f"Jogo {i+1}" for i in range(len(df))]
            df.columns = [f"Número {i+1}" for i in range(len(df.columns))]
            
            output = io.BytesIO()
            with pd.ExcelWriter(output, engine='openpyxl') as writer:
                df.to_excel(writer, sheet_name=f'Jogos {num_dezenas} dezenas')
                
            output.seek(0)
            return send_file(
                output,
                mimetype='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
                as_attachment=True,
                download_name='jogos_mega_sena.xlsx'
            )
            
        elif format == 'html':
            html_content = f"""
            <html>
            <head>
                <title>Jogos Mega Sena</title>
                <style>
                    table {{ border-collapse: collapse; width: 100%; }}
                    th, td {{ border: 1px solid black; padding: 8px; text-align: center; }}
                    th {{ background-color: #209869; color: white; }}
                </style>
            </head>
            <body>
                <h2>Jogos gerados com {num_dezenas} dezenas</h2>
                <p>Total de jogos: {len(combinations)}</p>
                <table>
                    <tr>
                        <th>Jogo</th>
                        {''.join(f'<th>Número {i+1}</th>' for i in range(num_dezenas))}
                    </tr>
                    {''.join(f'<tr><td>Jogo {i+1}</td>{"".join(f"<td>{n}</td>" for n in combo)}</tr>' for i, combo in enumerate(combinations))}
                </table>
            </body>
            </html>
            """
            
            return send_file(
                io.BytesIO(html_content.encode()),
                mimetype='text/html',
                as_attachment=True,
                download_name='jogos_mega_sena.html'
            )
    except Exception as e:
        return jsonify({'error': str(e)}), 400

# @app.route('/check-results', methods=['POST'])
# def check_results():
#     try:
#         data = request.json
#         generated_games = data['games']
        
#         # Buscar resultados da API com timeout e tratamento de erro
#         try:
#             response = requests.get(
#                 'https://loteriascaixa-api.herokuapp.com/api/megasena/latest',
#                 timeout=10
#             )
#             response.raise_for_status()  # Levanta exceção para códigos de erro HTTP
#             latest_results = response.json()
#         except requests.exceptions.RequestException as e:
#             return jsonify({'error': f'Erro ao acessar API da loteria: {str(e)}'}), 500
        
#         # Analisar jogos
#         results = []
#         for game in generated_games:
#             matches = []
#             for result in latest_results:
#                 numbers = set(map(int, game))
#                 drawn_numbers = set(result['dezenas'])
#                 hits = len(numbers.intersection(drawn_numbers))
#                 if hits >= 4:  # Registrar apenas 4+ acertos
#                     matches.append({
#                         'concurso': result['concurso'],
#                         'data': result['data'],
#                         'acertos': hits,
#                         'numeros_sorteados': result['dezenas']
#                     })
#             if matches:
#                 results.append({
#                     'jogo': game,
#                     'resultados': sorted(matches, key=lambda x: x['acertos'], reverse=True)
#                 })
        
#         return jsonify({
#             'results': sorted(results, key=lambda x: max(r['acertos'] for r in x['resultados']), reverse=True)
#         })
        
#     except Exception as e:
#         return jsonify({'error': str(e)}), 400


@app.route('/check-results', methods=['POST'])
def check_results():
    try:
        data = request.json
        generated_games = data['games']
        
        # Buscar todos os resultados da Mega-Sena com timeout e tratamento de erro
        try:
            response = requests.get(
                'https://loteriascaixa-api.herokuapp.com/api/megasena',
                timeout=10
            )
            response.raise_for_status()  # Levanta exceção para códigos de erro HTTP
            all_results = response.json()
        except requests.exceptions.RequestException as e:
            return jsonify({'error': f'Erro ao acessar API da loteria: {str(e)}'}), 500

        # Conferir jogos
        results = []
        for game in generated_games:
            matches = []
            for result in all_results:
                numbers = set(map(int, game))
                drawn_numbers = set(map(int, result['dezenas']))
                hits = len(numbers.intersection(drawn_numbers))
                if hits >= 4:  # Registrar apenas 4+ acertos
                    matches.append({
                        'concurso': result['concurso'],
                        'data': result['data'],
                        'acertos': hits,
                        'numeros_sorteados': result['dezenas']
                    })
            if matches:
                results.append({
                    'jogo': game,
                    'resultados': sorted(matches, key=lambda x: x['acertos'], reverse=True)
                })
        
        return jsonify({
            'results': sorted(results, key=lambda x: max(r['acertos'] for r in x['resultados']), reverse=True)
        })
        
    except Exception as e:
        return jsonify({'error': str(e)}), 400




if __name__ == '__main__':
    app.run(debug=True)  # Corrigido o espaçamento
	
	document.addEventListener('DOMContentLoaded', function() {
    // Gerar campos de input com validação
    const inputSection = document.querySelector('.number-inputs');
    for (let i = 0; i < 15; i++) {
        const input = document.createElement('input');
        input.type = 'text';  // Mudado para text para melhor controle
        input.pattern = '[0-9]';  // Aceita apenas um dígito de 0-9
        input.required = true;
        input.maxLength = 1;
        input.addEventListener('input', function(e) {
            let value = e.target.value;
            // Permitir apenas dígitos de 0-9
            if (!/^[0-9]$/.test(value)) {
                // Se o valor não for um único dígito entre 0-9, pega apenas o último dígito inserido
                value = value.replace(/[^0-9]/g, '').slice(-1);
            }
            e.target.value = value;
            
            // Auto-avançar para o próximo campo quando um dígito é inserido
            if (value && this.nextElementSibling && this.nextElementSibling.tagName === 'INPUT') {
                this.nextElementSibling.focus();
            }
        });
        inputSection.appendChild(input);
    }



// No arquivo main.js, atualize a função generateGrid:
function generateGrid(numbers) {
    const grid = document.querySelector('.triangle-grid');
    grid.innerHTML = '';
    
    const rows = [5, 4, 3, 2, 1];
    let numberIndex = 0;
    
    rows.forEach((cellCount) => {
        const row = document.createElement('div');
        row.className = 'grid-row';
        row.style.justifyContent = 'center';  // Centraliza as células
        row.style.display = 'flex';  // Garante que as células fiquem em linha
        row.style.gap = '10px';  // Espaço entre as células
        row.style.margin = '5px 0';  // Espaço entre as linhas
        
        for (let i = 0; i < cellCount; i++) {
            const cell = document.createElement('div');
            cell.className = 'grid-cell';
            // Garante que o zero seja exibido
            const value = numbers[numberIndex];
            cell.textContent = (value !== undefined && value !== null) ? value.toString() : '';
            // Adiciona estilos para a célula circular
            cell.style.width = '40px';
            cell.style.height = '40px';
            cell.style.borderRadius = '50%';
            cell.style.border = '2px solid #209869';  // Cor verde da Mega Sena
            cell.style.display = 'flex';
            cell.style.alignItems = 'center';
            cell.style.justifyContent = 'center';
            cell.style.backgroundColor = 'white';
            cell.style.fontSize = '16px';
            
            row.appendChild(cell);
            numberIndex++;
        }
        
        grid.appendChild(row);
    });
}

    
    // Função para formatar o jogo (ordenar em ordem crescente)
    function formatGame(numbers) {
        return numbers.sort((a, b) => a - b).join(' ');
    }

    // Função para exibir as combinações (atualizada com funcionalidades do código2)
    function displayCombinations(combinations, numDezenas = 15) {
        const resultsDiv = document.getElementById('combinations-result');
        resultsDiv.innerHTML = `
            <h3>Jogos gerados com ${numDezenas} dezenas (Total: ${combinations.length} jogos)</h3>
            <div id="games-list"></div>
            <button id="check-results" class="btn btn-primary mt-3">Conferir Resultados</button>
        `;
        
        const gamesList = document.getElementById('games-list');
        combinations.forEach((combo, index) => {
            gamesList.innerHTML += `
                <div class="combination" data-game="${combo.join(' ')}">
                    Jogo ${(index + 1).toString().padStart(2, '0')}: ${combo.join(' ')}
                </div>`;
        });
        
        // Adicionar listener para o botão de conferência
        document.getElementById('check-results').addEventListener('click', checkResults);
    }

    // Função para conferir os resultados
    async function checkResults() {
        try {
            const games = Array.from(document.querySelectorAll('.combination'))
                .map(div => div.dataset.game.split(' '));
                
            const response = await fetch('/check-results', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ games })
            });
            
            const data = await response.json();
            
            if (!response.ok) {
                throw new Error(data.error || 'Erro ao conferir resultados');
            }
            
            // Destacar jogos com acertos
            data.results.forEach(result => {
                const gameDiv = Array.from(document.querySelectorAll('.combination'))
                    .find(div => div.dataset.game === result.jogo.join(' '));
                    
                if (gameDiv) {
                    gameDiv.classList.add('has-hits');
                    gameDiv.innerHTML += `
                        <div class="hits-info">
                            ${result.resultados.map(r => 
                                `<div>Concurso ${r.concurso}: ${r.acertos} acertos</div>`
                            ).join('')}
                        </div>`;
                }
            });
            
        } catch (error) {
            alert(error.message);
        }
    }

    // // Substitua o event listener do botão 'generate-btn' por este:
    // document.getElementById('generate-btn').addEventListener('click', async function() {
    //     try {
    //         showLoading();
    //         const inputs = document.querySelectorAll('.number-inputs input');
    //         const numbers = Array.from(inputs).map(input => parseInt(input.value));
            
    //         if (numbers.some(isNaN)) {
    //             alert('Por favor, preencha todos os números.');
    //             return;
    //         }
            
    //         const numCombinations = parseInt(document.getElementById('num-combinations').value);
            
    //         const response = await fetch('/generate', {
    //             method: 'POST',
    //             headers: {
    //                 'Content-Type': 'application/json'
    //             },
    //             body: JSON.stringify({
    //                 numbers: numbers,
    //                 combinations: numCombinations
    //             })
    //         });
    
    //         const data = await response.json();
            
    //         if (!response.ok) {
    //             throw new Error(data.error || 'Erro ao gerar combinações');
    //         }
    
    //         // Gera o grid triangular
    //         generateGrid(numbers);
            
    //         // Exibe as combinações
    //         displayCombinations(data.combinations, numCombinations);
            
    //     } catch (error) {
    //         alert(error.message);
    //     } finally {
    //         hideLoading();
    //     }
    // });

    document.getElementById('generate-btn').addEventListener('click', async function() {
        try {
            showLoading();
            const inputs = document.querySelectorAll('.number-inputs input');
            const numbers = Array.from(inputs).map(input => parseInt(input.value));
            
            if (numbers.some(isNaN)) {
                alert('Por favor, preencha todos os números.');
                return;
            }
            
            const numCombinations = parseInt(document.getElementById('num-combinations').value);
            
            const response = await fetch('/generate', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                body: JSON.stringify({
                    numbers: numbers,
                    combinations: numCombinations
                })
            });
    
            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || `Erro ${response.status}: ${response.statusText}`);
            }
    
            const data = await response.json();
            
            // Gera o grid triangular
            generateGrid(numbers);
            
            // Exibe as combinações
            displayCombinations(data.combinations, numCombinations);
            
        } catch (error) {
            console.error('Erro:', error);
            alert('Erro ao gerar combinações: ' + error.message);
        } finally {
            hideLoading();
        }
    });


    // Para corrigir os downloads, adicione o handler correto no JavaScript:
    function downloadResults(format) {
        const form = document.createElement('form');
        form.method = 'GET';
        form.action = `/download/${format}`;
        document.body.appendChild(form);
        form.submit();
        document.body.removeChild(form);
    }

    // Adicione os event listeners para os botões
    document.getElementById('download-txt').addEventListener('click', () => downloadResults('txt'));
    document.getElementById('download-html').addEventListener('click', () => downloadResults('html'));
    document.getElementById('download-excel').addEventListener('click', () => downloadResults('xlsx'));

});

//Feedback visual:
function showLoading() {
    const btn = document.getElementById('generate-btn');
    btn.disabled = true;
    btn.textContent = 'Gerando...';
}

function hideLoading() {
    const btn = document.getElementById('generate-btn');
    btn.disabled = false;
    btn.textContent = 'Gerar Combinações';
}

document.addEventListener('DOMContentLoaded', function() {
    // Gerar campos de input com validação
    const inputSection = document.querySelector('.number-inputs');
    for (let i = 0; i < 15; i++) {
        const input = document.createElement('input');
        input.type = 'text';  // Mudado para text para melhor controle
        input.pattern = '[0-9]';  // Aceita apenas um dígito de 0-9
        input.required = true;
        input.maxLength = 1;
        input.addEventListener('input', function(e) {
            let value = e.target.value;
            // Permitir apenas dígitos de 0-9
            if (!/^[0-9]$/.test(value)) {
                // Se o valor não for um único dígito entre 0-9, pega apenas o último dígito inserido
                value = value.replace(/[^0-9]/g, '').slice(-1);
            }
            e.target.value = value;
            
            // Auto-avançar para o próximo campo quando um dígito é inserido
            if (value && this.nextElementSibling && this.nextElementSibling.tagName === 'INPUT') {
                this.nextElementSibling.focus();
            }
        });
        inputSection.appendChild(input);
    }



// No arquivo main.js, atualize a função generateGrid:
function generateGrid(numbers) {
    const grid = document.querySelector('.triangle-grid');
    grid.innerHTML = '';
    
    const rows = [5, 4, 3, 2, 1];
    let numberIndex = 0;
    
    rows.forEach((cellCount) => {
        const row = document.createElement('div');
        row.className = 'grid-row';
        row.style.justifyContent = 'center';  // Centraliza as células
        row.style.display = 'flex';  // Garante que as células fiquem em linha
        row.style.gap = '10px';  // Espaço entre as células
        row.style.margin = '5px 0';  // Espaço entre as linhas
        
        for (let i = 0; i < cellCount; i++) {
            const cell = document.createElement('div');
            cell.className = 'grid-cell';
            // Garante que o zero seja exibido
            const value = numbers[numberIndex];
            cell.textContent = (value !== undefined && value !== null) ? value.toString() : '';
            // Adiciona estilos para a célula circular
            cell.style.width = '40px';
            cell.style.height = '40px';
            cell.style.borderRadius = '50%';
            cell.style.border = '2px solid #209869';  // Cor verde da Mega Sena
            cell.style.display = 'flex';
            cell.style.alignItems = 'center';
            cell.style.justifyContent = 'center';
            cell.style.backgroundColor = 'white';
            cell.style.fontSize = '16px';
            
            row.appendChild(cell);
            numberIndex++;
        }
        
        grid.appendChild(row);
    });
}

    
    // Função para formatar o jogo (ordenar em ordem crescente)
    function formatGame(numbers) {
        return numbers.sort((a, b) => a - b).join(' ');
    }

    // Função para exibir as combinações (atualizada com funcionalidades do código2)
    function displayCombinations(combinations, numDezenas = 15) {
        const resultsDiv = document.getElementById('combinations-result');
        resultsDiv.innerHTML = `
            <h3>Jogos gerados com ${numDezenas} dezenas (Total: ${combinations.length} jogos)</h3>
            <div id="games-list"></div>
            <button id="check-results" class="btn btn-primary mt-3">Conferir Resultados</button>
        `;
        
        const gamesList = document.getElementById('games-list');
        combinations.forEach((combo, index) => {
            gamesList.innerHTML += `
                <div class="combination" data-game="${combo.join(' ')}">
                    Jogo ${(index + 1).toString().padStart(2, '0')}: ${combo.join(' ')}
                </div>`;
        });
        
        // Adicionar listener para o botão de conferência
        document.getElementById('check-results').addEventListener('click', checkResults);
    }

    // Função para conferir os resultados
    async function checkResults() {
        try {
            const games = Array.from(document.querySelectorAll('.combination'))
                .map(div => div.dataset.game.split(' '));
                
            const response = await fetch('/check-results', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ games })
            });
            
            const data = await response.json();
            
            if (!response.ok) {
                throw new Error(data.error || 'Erro ao conferir resultados');
            }
            
            // Destacar jogos com acertos
            data.results.forEach(result => {
                const gameDiv = Array.from(document.querySelectorAll('.combination'))
                    .find(div => div.dataset.game === result.jogo.join(' '));
                    
                if (gameDiv) {
                    gameDiv.classList.add('has-hits');
                    gameDiv.innerHTML += `
                        <div class="hits-info">
                            ${result.resultados.map(r => 
                                `<div>Concurso ${r.concurso}: ${r.acertos} acertos</div>`
                            ).join('')}
                        </div>`;
                }
            });
            
        } catch (error) {
            alert(error.message);
        }
    }

    // // Substitua o event listener do botão 'generate-btn' por este:
    // document.getElementById('generate-btn').addEventListener('click', async function() {
    //     try {
    //         showLoading();
    //         const inputs = document.querySelectorAll('.number-inputs input');
    //         const numbers = Array.from(inputs).map(input => parseInt(input.value));
            
    //         if (numbers.some(isNaN)) {
    //             alert('Por favor, preencha todos os números.');
    //             return;
    //         }
            
    //         const numCombinations = parseInt(document.getElementById('num-combinations').value);
            
    //         const response = await fetch('/generate', {
    //             method: 'POST',
    //             headers: {
    //                 'Content-Type': 'application/json'
    //             },
    //             body: JSON.stringify({
    //                 numbers: numbers,
    //                 combinations: numCombinations
    //             })
    //         });
    
    //         const data = await response.json();
            
    //         if (!response.ok) {
    //             throw new Error(data.error || 'Erro ao gerar combinações');
    //         }
    
    //         // Gera o grid triangular
    //         generateGrid(numbers);
            
    //         // Exibe as combinações
    //         displayCombinations(data.combinations, numCombinations);
            
    //     } catch (error) {
    //         alert(error.message);
    //     } finally {
    //         hideLoading();
    //     }
    // });

    document.getElementById('generate-btn').addEventListener('click', async function() {
        try {
            showLoading();
            const inputs = document.querySelectorAll('.number-inputs input');
            const numbers = Array.from(inputs).map(input => parseInt(input.value));
            
            if (numbers.some(isNaN)) {
                alert('Por favor, preencha todos os números.');
                return;
            }
            
            const numCombinations = parseInt(document.getElementById('num-combinations').value);
            
            const response = await fetch('/generate', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                body: JSON.stringify({
                    numbers: numbers,
                    combinations: numCombinations
                })
            });
    
            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || `Erro ${response.status}: ${response.statusText}`);
            }
    
            const data = await response.json();
            
            // Gera o grid triangular
            generateGrid(numbers);
            
            // Exibe as combinações
            displayCombinations(data.combinations, numCombinations);
            
        } catch (error) {
            console.error('Erro:', error);
            alert('Erro ao gerar combinações: ' + error.message);
        } finally {
            hideLoading();
        }
    });


    // Para corrigir os downloads, adicione o handler correto no JavaScript:
    function downloadResults(format) {
        const form = document.createElement('form');
        form.method = 'GET';
        form.action = `/download/${format}`;
        document.body.appendChild(form);
        form.submit();
        document.body.removeChild(form);
    }

    // Adicione os event listeners para os botões
    document.getElementById('download-txt').addEventListener('click', () => downloadResults('txt'));
    document.getElementById('download-html').addEventListener('click', () => downloadResults('html'));
    document.getElementById('download-excel').addEventListener('click', () => downloadResults('xlsx'));

});

//Feedback visual:
function showLoading() {
    const btn = document.getElementById('generate-btn');
    btn.disabled = true;
    btn.textContent = 'Gerando...';
}

function hideLoading() {
    const btn = document.getElementById('generate-btn');
    btn.disabled = false;
    btn.textContent = 'Gerar Combinações';
}

/*# CSS Styles (static/css/style.css):*/

:root {
    --mega-sena-green: #209869;
    --mega-sena-light: #e8f5e9;
}

body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 20px;
    background-color: #f5f5f5;
}

.container {
    max-width: 800px;
    margin: 0 auto;
    background: white;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
}


.triangle-grid {
    display: flex;
    flex-direction: column;
    align-items: center;
    background-color: #e8f5e9;  /* Fundo verde claro */
    padding: 20px;
    border-radius: 8px;
    margin: 20px 0;
}

.grid-row {
    display: flex;
    justify-content: center;
    gap: 10px;
    margin: 5px 0;
}

.grid-cell {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    border: 2px solid #209869;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: white;
    font-size: 16px;
}

.download-buttons {
    display: flex;
    gap: 10px;
    margin-top: 20px;
}

button {
    background-color: var(--mega-sena-green);
    color: white;
    border: none;
    padding: 10px 20px;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s;
}

button:hover {
    background-color: #1b7d56;
}
.combination {
    padding: 10px;
    margin: 5px 0;
    background: var(--mega-sena-light);
    border-radius: 5px;
    font-family: monospace;
}

.number-inputs input {
    width: 40px;
    height: 40px;
    text-align: center;
    margin: 2px;
    border: 2px solid var(--mega-sena-green);
    border-radius: 5px;
    font-size: 18px;
}

.results-section h3 {
    color: var(--mega-sena-green);
    margin: 20px 0;
}
.has-hits {
    background-color: #90EE90;
}

.hits-info {
    margin-top: 5px;
    font-size: 0.9em;
    color: #666;
}

#check-results {
    background-color: var(--mega-sena-green);
    color: white;
    border: none;
    padding: 10px 20px;
    border-radius: 5px;
    cursor: pointer;
}
<!--# HTML Template (templates/index.html):-->

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <title>Tabela Cruzamento Números - Mega Sena</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
</head>
<body>
    <div class="container">
        <h1>Tabela de Cruzamento de Números</h1>
        
        <div class="input-section">
            <h2>Digite 15 números (0-9):</h2>
            <div class="number-inputs">
                <!-- JavaScript will generate input fields -->
            </div><br />
            
            <div class="combinations-input">
                <label for="num-combinations">Número de combinações:</label>
                <input type="number" id="num-combinations" min="6" max="20" value="6">
            </div><br />
            
            <button id="generate-btn">Gerar Combinações</button>
        </div>

        <div class="triangle-grid">
            <!-- JavaScript will generate the grid -->
             <p></p>
        </div>

        <div class="results-section">
            <h2>Combinações Geradas</h2>
            <div id="combinations-result"></div>
            
            <div class="download-buttons">
                <button onclick="downloadResults('txt')">Download TXT</button>
                <button onclick="downloadResults('html')">Download HTML</button>
                <button onclick="downloadResults('xlsx')">Download Excel</button>
            </div>
        </div>
    </div>
    
    <script src="{{ url_for('static', filename='js/main.js') }}"></script>
</body>
</html>

flask==2.0.1
pandas==1.3.3
openpyxl==3.0.9
Werkzeug
requests



